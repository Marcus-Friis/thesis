#!/bin/bash

CLASSPATH="..:moss.jar"; export CLASSPATH

ulimit -t 1200 # -v 1048576

mode=$1
if [[ $mode != "ext" \
   && $mode != "prune"   && $mode != "perfect" \
   && $mode != "ring"    && $mode != "rvse" \
   && $mode != "repedge" && $mode != "repring" \
   && $mode != "supp" ]]; then
  echo "usage: $0 <mode> [dataset [supplist [options]]]"
  echo "list of benchmark modes:"
  echo "ext      comparison of extension types"
  echo "prune    comparison of pruning techniques"
  echo "perfect  comparison of perfect extension pruning modes"
  echo "rvse     comparison of ring and edge extensions"
  echo "ring     comparison of ring mining modes"
  echo "repedge  comparison of repository/can. form (edge extensions)"
  echo "repring  comparison of repository/can. form (ring extensions)"
  echo "supp     comparison of support types"
  exit
fi

if   [[ $mode == "repedge" ]]; then mode="ext";  repos=1;
elif [[ $mode == "repring" ]]; then mode="ring"; repos=1;
else                                             repos=0;
fi

data=${2:-"data/ic93.sln"}
base=`echo $data | sed "s/.*[/]//;s/[.][^.]*$//"`
ext=`echo $data | sed "s/.*[.]//"`

list=$3
if [[ $list == "" ]]; then
  if   [[ $base == "ic93" ]];
  then list="3.0 3.5 4.0 4.5 5.0 5.5 6.0";
  elif [[ $base == "steroids" ]];
  then list="-1 -2 -3 -4 -5 -6 -7 -8";
  else list="10 20 30 40 50 60 70 80 90 100";
  fi
fi
shift; shift; shift

comp=""
#comp="-Xint"
#comp="-Xcomp"
cmd="java $comp -Xmx512M moss.Miner -i$ext -o$ext $data"
# cmd="java $comp -Xmx800M moss.Miner -i$ext -o$ext $data"
# cmd="java $comp -Xmx800M -Xprof moss.Miner -i$ext -o$ext $data"
# cmd="moss -i$ext -o$ext $data"

rm -f moss.sub $base.res

for supp in $list; do
  rm -f $base.tmp

  echo "minsupp: $supp" | tee -a $base.tmp

  # --- comparison of extension types ---
  if [[ $mode == "ext" ]]; then
    cmd="$cmd -s$supp -e -p $*"
    echo "extension: maxsrc"   | tee -a $base.tmp
    $cmd -q    2>&1            | tee -a $base.tmp
    echo "extension: mxs+can"  | tee -a $base.tmp
    $cmd +q    2>&1            | tee -a $base.tmp
    echo "extension: rmpath"   | tee -a $base.tmp
    $cmd -q -g 2>&1            | tee -a $base.tmp
    echo "extension: rmp+can"  | tee -a $base.tmp
    $cmd +q -g 2>&1            | tee -a $base.tmp
  fi

  # --- comparison of pruning techniques ---
  if [[ $mode == "prune" ]]; then
    cmd="$cmd -s$supp $*"
    echo "pruning: none"       | tee -a $base.tmp
    $cmd -e -p -q -h 2>&1      | tee -a $base.tmp
    echo "pruning: equiv"      | tee -a $base.tmp
    $cmd +e -p -q -h 2>&1      | tee -a $base.tmp
    echo "pruning: perfect"    | tee -a $base.tmp
    $cmd -e +p -q -h 2>&1      | tee -a $base.tmp
    echo "pruning: canonic"    | tee -a $base.tmp
    $cmd -e -p +q -h 2>&1      | tee -a $base.tmp
    echo "pruning: orbits"     | tee -a $base.tmp
    $cmd -e -p +q +h 2>&1      | tee -a $base.tmp
    echo "pruning: equ+per"    | tee -a $base.tmp
    $cmd +e +p -q -h 2>&1      | tee -a $base.tmp
    echo "pruning: equ+can"    | tee -a $base.tmp
    $cmd +e -p +q -h 2>&1      | tee -a $base.tmp
    echo "pruning: per+can"    | tee -a $base.tmp
    $cmd -e +p +q -h 2>&1      | tee -a $base.tmp
    echo "pruning: noorb"      | tee -a $base.tmp
    $cmd +e +p +q -h 2>&1      | tee -a $base.tmp
    echo "pruning: noperf"     | tee -a $base.tmp
    $cmd +e -p +q +h 2>&1      | tee -a $base.tmp
    echo "pruning: noequ"      | tee -a $base.tmp
    $cmd -e +p +q +h 2>&1      | tee -a $base.tmp
    echo "pruning: all"        | tee -a $base.tmp
    $cmd +e +p +q +h 2>&1      | tee -a $base.tmp
  fi

  # --- comparison of perfect extension pruning ---
  if [[ $mode == "perfect" ]]; then
    cmd="$cmd -s$supp -e +q $*"
    echo "pruning: none"       | tee -a $base.tmp
    $cmd -p -P 2>&1            | tee -a $base.tmp
    echo "pruning: partial"    | tee -a $base.tmp
    $cmd -p +P 2>&1            | tee -a $base.tmp
    echo "pruning: full"       | tee -a $base.tmp
    $cmd +p -P 2>&1            | tee -a $base.tmp
  fi

  # --- comparison of ring and edge extensions ---
  if [[ $mode == "rvse" ]]; then
    cmd="$cmd -s$supp -e -p +q $*"
    echo "extension: edge"     | tee -a $base.tmp
    $cmd +P       2>&1         | tee -a $base.tmp
    echo "extension: ring"     | tee -a $base.tmp
    $cmd -r5:6 -R 2>&1         | tee -a $base.tmp
  fi

  # --- comparison of ring mining modes ---
  if [[ $mode == "ring" ]]; then
    cmd="$cmd -s$supp -r5:6 -e -p $*"
    echo "pruning: close"      | tee -a $base.tmp
    $cmd -O +q 2>&1            | tee -a $base.tmp
    echo "pruning: merge"      | tee -a $base.tmp
    $cmd -E +q 2>&1            | tee -a $base.tmp
    echo "pruning: reorder"    | tee -a $base.tmp
    $cmd -R +q 2>&1            | tee -a $base.tmp
    echo "pruning: repos"      | tee -a $base.tmp
    $cmd -R -q 2>&1            | tee -a $base.tmp
  fi

  # --- comparison of support types ---
  if [[ $mode == "supp" ]]; then
    cmd="$cmd -s$supp -e -p $*"
    echo "support: graphs"     | tee -a $base.tmp
    $cmd -k0 2>&1              | tee -a $base.tmp
    echo "support: mis_olap"   | tee -a $base.tmp
    $cmd -k1 2>&1              | tee -a $base.tmp
    echo "support: mis_harm"   | tee -a $base.tmp
    $cmd -k2 2>&1              | tee -a $base.tmp
    echo "support: min_img"    | tee -a $base.tmp
    $cmd -k3 2>&1              | tee -a $base.tmp
  fi

  if (( repos == 1 )); then
    gawk '
    ($1 == "minsupp:")   { minsupp = ($2 >= 0) ? $2 : -$2; }
    ($1 == "pruning:")   { modelist[n++] = mode = $2; }
    ($1 == "extension:") { modelist[n++] = mode = $2; }
    ($1 == "support:")   { modelist[n++] = mode = $2; }
    ((NF > 2) && ($(NF-2) == "substructure(s)]")) {
      subs [mode] = substr($(NF-3), index($1, "[") +1);
      time [mode] = substr($NF, 2, length($NF)-4);
    }
    ($1 == "number")      && ($5 == "nodes")       { nodes [mode] = $NF; }
    ($1 == "number")      && ($4 == "fragments")   { frags [mode] = $NF; }
    ($1 == "duplicate")   && ($3 == "pruning")     { duplic[mode] = $NF; }
    ($1 == "accesses")    && ($3 == "repository")  { raccs [mode] = $NF; }
    ($1 == "comparisons") && ($3 == "fragments")   { comps [mode] = $NF; }
    ($1 == "actual")      && ($2 == "isomorphism") { isotst[mode] = $NF; }
    ($1 == "comparisons") && ($3 == "embeddings")  { embtst[mode] = $NF; }
    ($1 == "canonical")   && ($3 == "pruning")     { canon [mode] = $NF; }
    ($1 == "processing")                           { roots [mode]++; }
    END {
      printf("> %6.2f      ", minsupp);
      printf("time     subs    nodes    frags    ");
      printf(" accs    comps   isotsts  embtsts  duplics\n");
      for (i = 0; i < n; i++) {
        mode = modelist[i];
        if (mode ~ "+can") { d = canon[mode];
                             a = nodes[mode] -roots[mode] +d; }
        else               { d = duplic[mode];
                             a = raccs[mode]; }
        printf("%-10s ", mode);
        printf("%7.2f ", time[mode]);
        printf("%8d ",   subs[mode]);
        printf("%8d ",   nodes[mode]);
        printf("%8d ",   frags[mode]);
        printf("%8d ",   a);
        printf("%8d ",   comps[mode]);
        printf("%8d ",   isotst[mode]);
        printf("%8d ",   embtst[mode]);
        printf("%8d\n",  d);
      }
    }' $base.tmp >> $base.res
  else
    gawk '
    ($1 == "minsupp:")   { minsupp = ($2 >= 0) ? $2 : -$2; }
    ($1 == "pruning:")   { modelist[n++] = mode = $2; }
    ($1 == "extension:") { modelist[n++] = mode = $2; }
    ($1 == "support:")   { modelist[n++] = mode = $2; }
    ((NF > 2) && ($(NF-2) == "substructure(s)]")) {
      subs[mode] = substr($(NF-3), index($1, "[") +1);
      time[mode] = substr($NF, 2, length($NF)-4);
    }
    ($1 == "number") && ($5 == "nodes")      { nodes [mode] = $NF; }
    ($1 == "number") && ($4 == "fragments")  { frags [mode] = $NF; }
    ($1 == "number") && ($4 == "embeddings") { embeds[mode] = $NF; }
    END {
      printf("> %6.2f      ", minsupp);
      printf("time     subs    nodes    frags    embeds\n");
      for (i = 0; i < n; i++) {
        mode = modelist[i];
        printf("%-10s ", mode);
        printf("%7.2f ", time[mode]);
        printf("%8d ",   subs[mode]);
        printf("%8d ",   nodes[mode]);
        printf("%8d ",   frags[mode]);
        printf("%9d\n",  embeds[mode]);
      }
    }' $base.tmp >> $base.res
  fi
done

echo ""
cat $base.res

rm -f moss.sub $base.tmp
